<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize variables
jumpspeed = 4;
movespeed= 3;
grapplespeed = 5;

dialogue_paused = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// get player input
if(!dialogue_paused) 
{
    key_left = keyboard_check(ord("A"));
    key_right = keyboard_check(ord("D"));
    key_jump = keyboard_check(ord("W"));
}
else
{
    key_left = 0;
    key_right = 0;
    key_jump = 0;
}
    
// horizontal movement
if(key_left)
{
  repeat(movespeed)
  {
    if (place_free(x-1,y)) { x -= 1; }
  }
}
if(key_right)
{
  repeat(movespeed)
  {
    if (place_free(x+1,y)) { x += 1; }
  }
}

// gravity
if (place_free(x,y+1)) { gravity = 0.3; }
else { gravity = 0; }

// jump if key press and player is grounded
if(key_jump)
{
  repeat(jumpspeed)
  {
    if (place_free(x,y-1)) { y -= 1; }
  }
}

// move towards grapple
if (instance_number(obj_grapple) = 1)
{
  if (obj_grapple.alarm[0] &lt; 1) { gravity = 0; }
  pd = point_direction(x, y, obj_grapple.x, obj_grapple.y);


  // movement twards grapple
  repeat(grapplespeed)
  {
    if (place_free(x+lengthdir_x(1, pd), y))
      x += lengthdir_x(1, pd);
    if (place_free(x, y+lengthdir_y(1, pd)))
      y += lengthdir_y(1, pd);
  }

  // smoothing
  speed -= 0.2;
  if (speed &lt;= 0)
    speed = 0;
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_platform">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///collisions
move_contact_solid(270, speed);
speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*with (obj_grappleMotion)
{
  instance_destroy();
}
with (obj_grappleFixed)
{
  instance_destroy();
}*/
with (obj_grapple) { instance_destroy(); }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if not instance_exists(obj_grappleMotion)
{
  grapple = instance_create(x,y,obj_grappleMotion)
  with (grapple) 
  {
    move_towards_point(mouse_x,mouse_y, 8)
    image_angle=direction
  }
}*/
if(!dialogue_paused) 
{
    with (obj_grapple) { instance_destroy(); }
    
    // create a new grapple and move it to contact solid in mouse direction
    aim = point_direction(x, y, mouse_x, mouse_y);
    grapple = instance_create(x+lengthdir_x(13, aim), y+lengthdir_y(13, aim), obj_grapple);
    grapple.aim = aim;
    with (grapple) { move_contact_solid(obj_player.aim, -1); } 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
